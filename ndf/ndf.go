////////////////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2020 xx network SEZC                                                       //
//                                                                                        //
// Use of this source code is governed by a license that can be found in the LICENSE file //
////////////////////////////////////////////////////////////////////////////////////////////

// Package ndf contains the structure for the network definition, which matches
// the JSON encoded network definition file (NDF). This file is passed, in some
// form, to all members of the network to relay connection and network
// information.
// The NDF also contains a base64 encoded signature of the network definition
// information.

package ndf

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"gitlab.com/xx_network/primitives/id"
	"testing"
	"time"
)

// NO_NDF is a string that the permissioning server responds with when a member
// of the network requests an NDF from it but the NDF is not yet available.
const NO_NDF = "Permissioning server does not have an ndf to give"

// NetworkDefinition structure hold connection and network information. It
// matches the JSON structure generated in Terraform.
type NetworkDefinition struct {
	Timestamp    time.Time
	Gateways     []Gateway
	Nodes        []Node
	Registration Registration
	Notification Notification
	UDB          UDB   `json:"Udb"`
	E2E          Group `json:"E2e"`
	CMIX         Group `json:"Cmix"`
}

// Gateway contains the connection and identity information of a gateway on the
// network.
type Gateway struct {
	ID             []byte `json:"Id"`
	Address        string
	TlsCertificate string `json:"Tls_certificate"`
}

// Node contains the connection and identity information of a node on the
// network.
type Node struct {
	ID             []byte `json:"Id"`
	Address        string
	TlsCertificate string `json:"Tls_certificate"`
}

// Registration contains the connection information for the permissioning
// server.
type Registration struct {
	Address        string
	TlsCertificate string `json:"Tls_certificate"`
}

// Notification contains the connection information for the notification bot.
type Notification struct {
	Address        string
	TlsCertificate string `json:"Tls_certificate"`
}

// UDB contains the ID and public key in PEM form for user discovery.
type UDB struct {
	ID        []byte `json:"Id"`
	PubKeyPem string `json:"Public_key_PEM"`
}

// Group contains the information used to reconstruct a cyclic group.
type Group struct {
	Prime      string
	SmallPrime string `json:"Small_prime"`
	Generator  string
}

// StripNdf returns a stripped down copy of the NetworkDefinition to be used by
// Clients.
func (ndf *NetworkDefinition) StripNdf() *NetworkDefinition {
	// Remove address and TLS cert for every node.
	var strippedNodes []Node
	for _, node := range ndf.Nodes {
		newNode := Node{
			ID: node.ID,
		}
		strippedNodes = append(strippedNodes, newNode)
	}

	// Create a new NetworkDefinition with the stripped information
	return &NetworkDefinition{
		Timestamp:    ndf.Timestamp,
		Gateways:     ndf.Gateways,
		Nodes:        strippedNodes,
		Registration: ndf.Registration,
		Notification: ndf.Notification,
		UDB:          ndf.UDB,
		E2E:          ndf.E2E,
		CMIX:         ndf.CMIX,
	}
}

// GetNodeId unmarshalls the node's ID bytes into an id.ID and returns it.
func (n *Node) GetNodeId() (*id.ID, error) {
	return id.Unmarshal(n.ID)
}

// GetGatewayId unmarshalls the gateway's ID bytes into an id.ID and returns it.
func (g *Gateway) GetGatewayId() (*id.ID, error) {
	return id.Unmarshal(g.ID)
}

// GetGatewayId unmarshalls the UDB ID bytes into an id.ID and returns it.
func (u *UDB) GetUdbId() (*id.ID, error) {
	return id.Unmarshal(u.ID)
}

// NewTestNDF generates a sample NDF used for testing.
func NewTestNDF(i interface{}) *NetworkDefinition {
	switch i.(type) {
	case *testing.T, *testing.M, *testing.B:
		break
	default:
		panic(fmt.Sprintf("NewTestNDF is restricted to testing only. Got %T", i))
	}

	ndfEncoded := ""

	ndfData, err := base64.StdEncoding.DecodeString(ndfEncoded)
	if err != nil {
		panic(err)
	}
	def := &NetworkDefinition{}
	err = json.Unmarshal(ndfData, def)
	if err != nil {
		panic(err)
	}

	return def
}
